Resources:
  labellingplatformresources85E6D027:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - HEAD
              - PUT
              - POST
            AllowedOrigins:
              - http://localhost:3000
              - https://labellingplatform.web.app
            ExposedHeaders:
              - Etag
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: LabellingPlatformCdkStack/labelling-platform-resources/Resource
  labellingplatformresourcesNotificationsFFF9A20A:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691
          - Arn
      BucketName:
        Ref: labellingplatformresources85E6D027
      NotificationConfiguration:
        LambdaFunctionConfigurations:
          - Events:
              - s3:ObjectCreated:*
            Filter:
              Key:
                FilterRules:
                  - Name: suffix
                    Value: .pdf
                  - Name: prefix
                    Value: pdfFiles/
            LambdaFunctionArn:
              Fn::GetAtt:
                - PdfToImageHandler49D19941
                - Arn
          - Events:
              - s3:ObjectCreated:*
            Filter:
              Key:
                FilterRules:
                  - Name: suffix
                    Value: .jpg
                  - Name: prefix
                    Value: imageFiles/
            LambdaFunctionArn:
              Fn::GetAtt:
                - ImageToTextHandler6C49CF1E
                - Arn
    DependsOn:
      - labellingplatformresourcesAllowBucketNotificationsToLabellingPlatformCdkStackImageToTextHandlerEB92C4B83C9850B3
      - labellingplatformresourcesAllowBucketNotificationsToLabellingPlatformCdkStackPdfToImageHandler194159C0B36A605C
    Metadata:
      aws:cdk:path: LabellingPlatformCdkStack/labelling-platform-resources/Notifications/Resource
  labellingplatformresourcesAllowBucketNotificationsToLabellingPlatformCdkStackPdfToImageHandler194159C0B36A605C:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - PdfToImageHandler49D19941
          - Arn
      Principal: s3.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn:
        Fn::GetAtt:
          - labellingplatformresources85E6D027
          - Arn
    Metadata:
      aws:cdk:path: LabellingPlatformCdkStack/labelling-platform-resources/AllowBucketNotificationsToLabellingPlatformCdkStackPdfToImageHandler194159C0
  labellingplatformresourcesAllowBucketNotificationsToLabellingPlatformCdkStackImageToTextHandlerEB92C4B83C9850B3:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ImageToTextHandler6C49CF1E
          - Arn
      Principal: s3.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn:
        Fn::GetAtt:
          - labellingplatformresources85E6D027
          - Arn
    Metadata:
      aws:cdk:path: LabellingPlatformCdkStack/labelling-platform-resources/AllowBucketNotificationsToLabellingPlatformCdkStackImageToTextHandlerEB92C4B8
  PdfToImageHandlerServiceRole1D015916:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: LabellingPlatformCdkStack/PdfToImageHandler/ServiceRole/Resource
  PdfToImageHandlerServiceRoleDefaultPolicy0B38B531:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject
              - s3:Abort*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - labellingplatformresources85E6D027
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - labellingplatformresources85E6D027
                        - Arn
                    - /*
        Version: "2012-10-17"
      PolicyName: PdfToImageHandlerServiceRoleDefaultPolicy0B38B531
      Roles:
        - Ref: PdfToImageHandlerServiceRole1D015916
    Metadata:
      aws:cdk:path: LabellingPlatformCdkStack/PdfToImageHandler/ServiceRole/DefaultPolicy/Resource
  PdfToImageHandler49D19941:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: AssetParameters4a5a2fd86fb94d1d9b9959b61a36dd022b1c28288384e42f83252f50ed810b1dS3BucketD89A45E8
        S3Key:
          Fn::Join:
            - ""
            - - Fn::Select:
                  - 0
                  - Fn::Split:
                      - "||"
                      - Ref: AssetParameters4a5a2fd86fb94d1d9b9959b61a36dd022b1c28288384e42f83252f50ed810b1dS3VersionKey9BDFFEC1
              - Fn::Select:
                  - 1
                  - Fn::Split:
                      - "||"
                      - Ref: AssetParameters4a5a2fd86fb94d1d9b9959b61a36dd022b1c28288384e42f83252f50ed810b1dS3VersionKey9BDFFEC1
      Role:
        Fn::GetAtt:
          - PdfToImageHandlerServiceRole1D015916
          - Arn
      Description: This lambda converts PDF files to images for each of the pages found in the PDF
      Handler: pdfToImage.handler
      Layers:
        - arn:aws:lambda:us-east-1:764866452798:layer:ghostscript:8
      MemorySize: 1024
      Runtime: nodejs10.x
      Timeout: 300
    DependsOn:
      - PdfToImageHandlerServiceRoleDefaultPolicy0B38B531
      - PdfToImageHandlerServiceRole1D015916
    Metadata:
      aws:cdk:path: LabellingPlatformCdkStack/PdfToImageHandler/Resource
      aws:asset:path: /Volumes/workplace/React/labellingPlatformCDK/src/lambdaFunctions
      aws:asset:property: Code
  PdfToImageHandlerEventInvokeConfig26545713:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      FunctionName:
        Ref: PdfToImageHandler49D19941
      Qualifier: $LATEST
      MaximumRetryAttempts: 0
    Metadata:
      aws:cdk:path: LabellingPlatformCdkStack/PdfToImageHandler/EventInvokeConfig/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: LabellingPlatformCdkStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:PutBucketNotification
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      Roles:
        - Ref: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: LabellingPlatformCdkStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)
      Code:
        ZipFile: >-
          exports.handler = (event, context) => {
              // eslint-disable-next-line @typescript-eslint/no-require-imports, import/no-extraneous-dependencies
              const s3 = new (require('aws-sdk').S3)();
              // eslint-disable-next-line @typescript-eslint/no-require-imports
              const https = require('https');
              // eslint-disable-next-line @typescript-eslint/no-require-imports
              const url = require('url');
              log(JSON.stringify(event, undefined, 2));
              const props = event.ResourceProperties;
              if (event.RequestType === 'Delete') {
                  props.NotificationConfiguration = {}; // this is how you clean out notifications
              }
              const req = {
                  Bucket: props.BucketName,
                  NotificationConfiguration: props.NotificationConfiguration,
              };
              return s3.putBucketNotificationConfiguration(req, (err, data) => {
                  log({ err, data });
                  if (err) {
                      return submitResponse('FAILED', err.message + `\nMore information in CloudWatch Log Stream: ${context.logStreamName}`);
                  }
                  else {
                      return submitResponse('SUCCESS');
                  }
              });
              function log(obj) {
                  console.error(event.RequestId, event.StackId, event.LogicalResourceId, obj);
              }
              // eslint-disable-next-line max-len
              // adapted from https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html#cfn-lambda-function-code-cfnresponsemodule
              // to allow sending an error message as a reason.
              function submitResponse(responseStatus, reason) {
                  const responseBody = JSON.stringify({
                      Status: responseStatus,
                      Reason: reason || 'See the details in CloudWatch Log Stream: ' + context.logStreamName,
                      PhysicalResourceId: event.PhysicalResourceId || event.LogicalResourceId,
                      StackId: event.StackId,
                      RequestId: event.RequestId,
                      LogicalResourceId: event.LogicalResourceId,
                      NoEcho: false,
                  });
                  log({ responseBody });
                  const parsedUrl = url.parse(event.ResponseURL);
                  const options = {
                      hostname: parsedUrl.hostname,
                      port: 443,
                      path: parsedUrl.path,
                      method: 'PUT',
                      headers: {
                          'content-type': '',
                          'content-length': responseBody.length,
                      },
                  };
                  const request = https.request(options, (r) => {
                      log({ statusCode: r.statusCode, statusMessage: r.statusMessage });
                      context.done();
                  });
                  request.on('error', (error) => {
                      log({ sendError: error });
                      context.done();
                  });
                  request.write(responseBody);
                  request.end();
              }
          };
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
          - Arn
      Runtime: nodejs12.x
      Timeout: 300
    DependsOn:
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: LabellingPlatformCdkStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource
  ImageToTextHandlerServiceRoleD6043076:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: LabellingPlatformCdkStack/ImageToTextHandler/ServiceRole/Resource
  ImageToTextHandlerServiceRoleDefaultPolicy01A093AE:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject
              - s3:Abort*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - labellingplatformresources85E6D027
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - labellingplatformresources85E6D027
                        - Arn
                    - /*
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":s3:::"
                    - Ref: AssetParameters42254fcd14017dea39dc302cb1b05b36a15ef6ac6cc228328f09d3b25af1b520S3BucketA3A175E9
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":s3:::"
                    - Ref: AssetParameters42254fcd14017dea39dc302cb1b05b36a15ef6ac6cc228328f09d3b25af1b520S3BucketA3A175E9
                    - /*
        Version: "2012-10-17"
      PolicyName: ImageToTextHandlerServiceRoleDefaultPolicy01A093AE
      Roles:
        - Ref: ImageToTextHandlerServiceRoleD6043076
    Metadata:
      aws:cdk:path: LabellingPlatformCdkStack/ImageToTextHandler/ServiceRole/DefaultPolicy/Resource
  ImageToTextHandler6C49CF1E:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: AssetParametersab5d52556c77abf46ad157ac75b1e4de02e3927c177cc47952f0050b72c2ef7dS3BucketBDBD5A02
        S3Key:
          Fn::Join:
            - ""
            - - Fn::Select:
                  - 0
                  - Fn::Split:
                      - "||"
                      - Ref: AssetParametersab5d52556c77abf46ad157ac75b1e4de02e3927c177cc47952f0050b72c2ef7dS3VersionKey00507095
              - Fn::Select:
                  - 1
                  - Fn::Split:
                      - "||"
                      - Ref: AssetParametersab5d52556c77abf46ad157ac75b1e4de02e3927c177cc47952f0050b72c2ef7dS3VersionKey00507095
      Role:
        Fn::GetAtt:
          - ImageToTextHandlerServiceRoleD6043076
          - Arn
      Description: This lambda converts image files to text files
      Environment:
        Variables:
          BUCKET_NAME:
            Ref: AssetParameters42254fcd14017dea39dc302cb1b05b36a15ef6ac6cc228328f09d3b25af1b520S3BucketA3A175E9
          KEY:
            Fn::Join:
              - ""
              - - Fn::Select:
                    - 0
                    - Fn::Split:
                        - "||"
                        - Ref: AssetParameters42254fcd14017dea39dc302cb1b05b36a15ef6ac6cc228328f09d3b25af1b520S3VersionKeyBCC1AB1A
                - Fn::Select:
                    - 1
                    - Fn::Split:
                        - "||"
                        - Ref: AssetParameters42254fcd14017dea39dc302cb1b05b36a15ef6ac6cc228328f09d3b25af1b520S3VersionKeyBCC1AB1A
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
      Handler: index.handler
      MemorySize: 1024
      Runtime: nodejs14.x
      Timeout: 300
    DependsOn:
      - ImageToTextHandlerServiceRoleDefaultPolicy01A093AE
      - ImageToTextHandlerServiceRoleD6043076
    Metadata:
      aws:cdk:path: LabellingPlatformCdkStack/ImageToTextHandler/Resource
      aws:asset:path: /Volumes/workplace/React/labellingPlatformCDK/cdk.out/asset.ab5d52556c77abf46ad157ac75b1e4de02e3927c177cc47952f0050b72c2ef7d
      aws:asset:property: Code
  ImageToTextHandlerEventInvokeConfig75AD0B5E:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      FunctionName:
        Ref: ImageToTextHandler6C49CF1E
      Qualifier: $LATEST
      MaximumRetryAttempts: 0
    Metadata:
      aws:cdk:path: LabellingPlatformCdkStack/ImageToTextHandler/EventInvokeConfig/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAAE2VQQWrDMBB8S+7ypiah0FvbkEIvIbgvUOVNWNuSQCu5FKG/V6uQXHqa0TIzO6seXvbQb171D3dmnLfZ+ICQv6I2szp4xzEkE9Xh4gZkn4JB9SBvzBir8kruKoqzDtpixCCP6h0pkndFSXbmHeT3ZGZsYTdW1KLt96ghixuDJebqUB/JGbGK8sGPK7r46VY/Y82+UFv5b1gU7zotxRhaP0XaQh78gu0IwbNfyPy2xo3da3TOjzgxnBrcF5eiZA4Tb9e+/tUzPG0mJupCcpEswnDDP6Fg86FKAQAA
    Metadata:
      aws:cdk:path: LabellingPlatformCdkStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Parameters:
  AssetParameters42254fcd14017dea39dc302cb1b05b36a15ef6ac6cc228328f09d3b25af1b520S3BucketA3A175E9:
    Type: String
    Description: S3 bucket for asset "42254fcd14017dea39dc302cb1b05b36a15ef6ac6cc228328f09d3b25af1b520"
  AssetParameters42254fcd14017dea39dc302cb1b05b36a15ef6ac6cc228328f09d3b25af1b520S3VersionKeyBCC1AB1A:
    Type: String
    Description: S3 key for asset version "42254fcd14017dea39dc302cb1b05b36a15ef6ac6cc228328f09d3b25af1b520"
  AssetParameters42254fcd14017dea39dc302cb1b05b36a15ef6ac6cc228328f09d3b25af1b520ArtifactHash3BA05D31:
    Type: String
    Description: Artifact hash for asset "42254fcd14017dea39dc302cb1b05b36a15ef6ac6cc228328f09d3b25af1b520"
  AssetParameters4a5a2fd86fb94d1d9b9959b61a36dd022b1c28288384e42f83252f50ed810b1dS3BucketD89A45E8:
    Type: String
    Description: S3 bucket for asset "4a5a2fd86fb94d1d9b9959b61a36dd022b1c28288384e42f83252f50ed810b1d"
  AssetParameters4a5a2fd86fb94d1d9b9959b61a36dd022b1c28288384e42f83252f50ed810b1dS3VersionKey9BDFFEC1:
    Type: String
    Description: S3 key for asset version "4a5a2fd86fb94d1d9b9959b61a36dd022b1c28288384e42f83252f50ed810b1d"
  AssetParameters4a5a2fd86fb94d1d9b9959b61a36dd022b1c28288384e42f83252f50ed810b1dArtifactHashB233DFDB:
    Type: String
    Description: Artifact hash for asset "4a5a2fd86fb94d1d9b9959b61a36dd022b1c28288384e42f83252f50ed810b1d"
  AssetParametersab5d52556c77abf46ad157ac75b1e4de02e3927c177cc47952f0050b72c2ef7dS3BucketBDBD5A02:
    Type: String
    Description: S3 bucket for asset "ab5d52556c77abf46ad157ac75b1e4de02e3927c177cc47952f0050b72c2ef7d"
  AssetParametersab5d52556c77abf46ad157ac75b1e4de02e3927c177cc47952f0050b72c2ef7dS3VersionKey00507095:
    Type: String
    Description: S3 key for asset version "ab5d52556c77abf46ad157ac75b1e4de02e3927c177cc47952f0050b72c2ef7d"
  AssetParametersab5d52556c77abf46ad157ac75b1e4de02e3927c177cc47952f0050b72c2ef7dArtifactHash734C987C:
    Type: String
    Description: Artifact hash for asset "ab5d52556c77abf46ad157ac75b1e4de02e3927c177cc47952f0050b72c2ef7d"
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2

